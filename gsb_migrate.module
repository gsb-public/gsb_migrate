<?php

/**
 * @file
 * This module uses Migrate framework to migrate legacy GSB D7 data into fancy new GSB Revamp project.
 */

/**
 * Implements hook_migrate_api().
 */
function gsb_migrate_migrate_api() {
  $api = array(
    'api' => 2,
  );

  return $api;
}

/**
 * Implements hook_menu().
 */
function gsb_migrate_menu() {
  $items['admin/config/gsb/gsb_migrate'] = array(
    'title' => 'GSB Migration configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_migrate_config_form'),
    'file' => 'gsb_migrate.admin.inc',
    'access arguments' => array(MIGRATE_ACCESS_ADVANCED),
  );

  return $items;
}

/**
 * Implements hook_flush_caches().
 */
function gsb_migrate_flush_caches() {
  gsb_migrate_register_migrations();
}

/**
 * Register all migrations.
 */
function gsb_migrate_register_migrations() {

  // Get database connection.
  $source_database = variable_get('gsb_migrate_database_connection', array());
  if (empty($source_database)) {
    watchdog('gsb_migrate', 'No database connection set. Go to admin/config/gsb/gsb_migrate and setup a database connection.');
    return;
  }

  /**
   * Each migration being registered takes an array of arguments, some required
   * and some optional. Start with the common arguments required by all - the
   * source_connection (connection key, set up in settings.php, pointing to
   * the Drupal 6 database), source_version (major version of Drupal), and
   * group_name (a.k.a. import job).
   */
  $common_arguments = array(
    'source_connection' => 'gsb_legacy',
    'source_database' => $source_database,
    'source_version' => 7,
    'group_name' => 'content',
    'version_class' => 'GSBDrupal',
  );

  // Node migrations - each has its own class derived from the migrate_d2d class,
  // specifying its particular field mappings and transformations. source_type
  // and destination_type are required arguments.
  $node_arguments = array(
    array(
      'class_name' => 'GSBFacultyMigration',
      'description' => t('Migration of Faculty profile2 entities into Faculty CT nodes'),
      'machine_name' => 'GSBFaculty',
      'source_type' => 'faculty',
      'destination_type' => 'faculty',
      'default_uid' => 1,
    ),
  );

  foreach ($node_arguments as $arguments) {
    $arguments = array_merge_recursive($arguments, $common_arguments);
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'],
      $arguments);
  }

  // For vocabulary migrations, source_vocabulary and destination_vocabulary are
  // required arguments. Note that in Drupal 6 vocabularies did not have machine
  // names, so we use the vocabulary ID to uniquely identify them.
  $vocabulary_arguments = array(
    array(
      'description' => t('Migration of Academic Area terms'),
      'machine_name' => 'GSBTaxonomyAcademicArea',
      'source_vocabulary' => 'academic_area',
      'destination_vocabulary' => 'academic_area',
      'class_name' => 'GSBTaxonomyAcademicAreaMigration',
    ),
  );

  // Again, we're using the migrate_d2d class directly.
  // The soft dependency says that while we don't have to run the user migration
  // first, we want to make sure it's listed first so the vocubularies are
  // listed right ahead of the node migrations.
  $common_vocabulary_arguments = $common_arguments + array(
    'class_name' => 'DrupalTerm7Migration',
    'group_name' => 'taxonomy',
  );
  foreach ($vocabulary_arguments as $arguments) {
    $arguments += $common_vocabulary_arguments;
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'],
      $arguments);
  }
}

/**
 * Helper callback to extract first value from an array.
 * @param $values
 * @return mixed
 */
function singlify($values) {
  return reset($values);
}
