<?php

/**
 * @file
 * This module uses Migrate framework to migrate legacy GSB D7 data into fancy new GSB Revamp project.
 */

/**
 * Implements hook_migrate_api().
 */
function gsb_migrate_migrate_api() {
  $api = array(
    'api' => 2,
  );

  return $api;
}

/**
 * Implements hook_menu().
 */
function gsb_migrate_menu() {
  $items['admin/config/gsb/gsb_migrate'] = array(
    'title' => 'GSB Migration configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_migrate_config_form'),
    'file' => 'gsb_migrate.admin.inc',
    'access arguments' => array(MIGRATE_ACCESS_ADVANCED),
  );

  return $items;
}

/**
 * Implements hook_flush_caches().
 */
function gsb_migrate_flush_caches() {
  gsb_migrate_register_migrations();
}

/**
 * Register all migrations.
 */
function gsb_migrate_register_migrations() {
  // Data directory with CSV sources.
  $directory = drupal_get_path('module', 'gsb_migrate') . '/data/';

  // Get database connection.
  $source_database = variable_get('gsb_migrate_database_connection', array());
  if (empty($source_database)) {
    watchdog('gsb_migrate', 'No database connection set. Go to admin/config/gsb/gsb_migrate and setup a database connection.');
    return;
  }

  /**
   * Each migration being registered takes an array of arguments, some required
   * and some optional. Start with the common arguments required by all - the
   * source_connection (connection key, set up in settings.php, pointing to
   * the Drupal 6 database), source_version (major version of Drupal), and
   * group_name (a.k.a. import job).
   */
  $common_arguments = array(
    'source_connection' => 'gsb_legacy',
    'source_database' => $source_database,
    'source_version' => 7,
    'group_name' => 'content',
    'version_class' => 'GSBDrupal',
  );

  // Node migrations - each has its own class derived from the migrate_d2d class,
  // specifying its particular field mappings and transformations. source_type
  // and destination_type are required arguments.
  $node_arguments = array(
    array(
      'class_name' => 'GSBFacultyInsertMigration',
      'description' => t('Migration of Faculty profile2 entities into Faculty CT nodes'),
      'machine_name' => 'GSBFacultyInsert',
      'source_type' => 'faculty',
      'destination_type' => 'faculty',
      'default_uid' => 1,
    ),
    array(
      'class_name' => 'GSBFacultyUpdateMigration',
      'description' => t('Update manually created Faculty nodes.'),
      'machine_name' => 'GSBFacultyUpdate',
      'source_type' => 'faculty',
      'destination_type' => 'faculty',
      'default_uid' => 1,
    ),
    array(
      'class_name' => 'GSBBookMigration',
      'description' => t('Migrate Publications with Book type.'),
      'machine_name' => 'GSBBook',
      'source_type' => 'publication',
      'destination_type' => 'book',
      'default_uid' => 1,
    ),
  );

  foreach ($node_arguments as $arguments) {
    $arguments = array_merge_recursive($arguments, $common_arguments);
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'],
      $arguments);
  }

  // For vocabulary migrations, source_vocabulary and destination_vocabulary are
  // required arguments. Note that in Drupal 6 vocabularies did not have machine
  // names, so we use the vocabulary ID to uniquely identify them.
  $vocabulary_arguments = array(
    array(
      'description' => t('Migration of Academic Area terms'),
      'machine_name' => 'GSBTaxonomyAcademicArea',
      'source_vocabulary' => 'academic_area',
      'destination_vocabulary' => 'academic_area',
      'class_name' => 'GSBTaxonomyAcademicAreaMigration',
    ),
  );

  // Again, we're using the migrate_d2d class directly.
  // The soft dependency says that while we don't have to run the user migration
  // first, we want to make sure it's listed first so the vocubularies are
  // listed right ahead of the node migrations.
  $common_vocabulary_arguments = $common_arguments + array(
    'class_name' => 'DrupalTerm7Migration',
  );
  foreach ($vocabulary_arguments as $arguments) {
    $arguments += $common_vocabulary_arguments;
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'],
      $arguments);
  }

  // Migrate Book Authors in field collection.
  $book_authors = $common_arguments + array(
    'class_name' => 'GSBBookAuthorsMigration',
    'description' => t('Migrate Book CT field_authors field collection.'),
    'machine_name' => 'GSBBookAuthors',
  );
  Migration::registerMigration($book_authors['class_name'], $book_authors['machine_name'], $book_authors);

  $publication_ct = array(
    'group_name' => 'content',
    'source_file' => $directory . 'publication.csv',
  );
  Migration::registerMigration('GSBPublicationMigration', NULL, $publication_ct);

  $publication_authors = $common_arguments + array(
    'class_name' => 'GSBPublicationAuthorsMigration',
    'description' => t('Migrate Publication CT field_authors field collection.'),
    'machine_name' => 'GSBPublicationAuthors',
    'source_file' => $directory . 'publication-authors.csv',
  );
  Migration::registerMigration($publication_authors['class_name'], $publication_authors['machine_name'], $publication_authors);

  $business_website_categories = array(
    'group_name' => 'content',
    'source_file' => $directory . 'business_sites_categories.csv',
    'destination_vocabulary' => 'business_website_categories',
  );
  Migration::registerMigration('GSBTaxonomyBusWebsiteCategoriesMigration', NULL, $business_website_categories);

  $business_website = array(
    'group_name' => 'content',
    'source_file' => $directory . 'business_sites.csv',

  );
  Migration::registerMigration('GSBBusinessWebsiteMigration', NULL, $business_website);

  $media_item = array(
    'group_name' => 'content',
    'source_file' => $directory . 'media_item.csv',
  );
  Migration::registerMigration('GSBMediaItemMigration', NULL, $media_item);
  
  $working_paper_other_authors = array(
    'group_name' => 'content',
    'source_file' => $directory . 'working_paper_other_authors.csv',
  );
  Migration::registerMigration('GSBWorkingPaperOtherAuthorsMigration', NULL, $working_paper_other_authors); 

  $working_paper_items = array(
    'group_name' => 'content',
    'source_file' => $directory . 'working_paper_items.csv',
  );
  Migration::registerMigration('GSBWorkingPaperItemsMigration', NULL, $working_paper_items);

  // Idea Story group.
  $main_migration = 'GSBIdeaStory';
  $common_arguments = array(
    'group_name' => 'idea_story',
    'source_file' => $directory . 'idea_story.csv',
  );
  Migration::registerMigration('GSBIdeaStoryMigration', NULL, $common_arguments + array(
      'destination_type' => 'idea_story',
    ));

  $idea_story_byline = array(
    'group_name' => 'idea_story',
    'source_file' => $directory . 'idea_story_byline.csv',
  );
  Migration::registerMigration('GSBIdeaStoryBylineMigration', NULL, $idea_story_byline);

  Migration::registerMigration('GSBRelatedFacultyMigration', $main_migration . 'RelatedFaculty', $common_arguments + array(
    'destination_type' => 'field_related_faculty',
    'dependencies' => array($main_migration),
    'source_migration' => $main_migration,
  ));

  Migration::registerMigration('GSBRelatedContentMigration', $main_migration  . 'RelatedContent', $common_arguments + array(
    'destination_type' => 'field_related_other_unlimited',
    'dependencies' => array($main_migration),
    'source_migration' => $main_migration,
  ));

  $resource_types = array(
    'ResourceImage',
    'ResourceYoutube',
    'ResourceCallout',
    'ResourceTwitter',
  );

  foreach ($resource_types as $resource_name) {
    $machine_name = $main_migration . $resource_name;
    $class_name = 'GSB' . $resource_name . 'Migration';
    Migration::registerMigration($class_name, $machine_name, $common_arguments + array(
        'dependencies' => array($main_migration),
        'source_migration' => $main_migration,
      ));
  }

  // Offsite Idea Story group

  $main_migration = 'GSBOffsiteIdeaStory';
  $common_arguments = array(
    'group_name' => 'offsite_idea_story',
    'source_file' => $directory . 'offsite_idea_story.csv',
  );
  Migration::registerMigration($main_migration . 'Migration', NULL, $common_arguments + array(
    'destination_type' => 'offsite_idea_story',
  ));

  Migration::registerMigration('GSBRelatedFacultyMigration', $main_migration . 'RelatedFaculty', $common_arguments + array(
      'destination_type' => 'field_related_faculty',
      'dependencies' => array($main_migration),
      'source_migration' => $main_migration,
  ));

  // School story group
  $main_migration = 'GSBSchoolStory';
  $common_arguments = array(
    'group_name' => 'school_story',
    'source_file' => $directory . 'school_story.csv',
  );
  Migration::registerMigration($main_migration . 'Migration', NULL, $common_arguments + array(
    'destination_type' => 'school_story',
  ));

  Migration::registerMigration('GSBRelatedFacultyMigration', $main_migration . 'RelatedFaculty', $common_arguments + array(
      'destination_type' => 'field_related_faculty',
      'dependencies' => array($main_migration),
      'source_migration' => $main_migration,
    ));

  Migration::registerMigration('GSBRelatedContentMigration', $main_migration  . 'RelatedContent', $common_arguments + array(
      'destination_type' => 'field_related_other_unlimited',
      'dependencies' => array($main_migration),
      'source_migration' => $main_migration,
    ));

  $resource_types = array(
    'ResourceImage',
    'ResourceYoutube',
    'ResourceCallout',
    'ResourceTwitter',
  );

  foreach ($resource_types as $resource_name) {
    $machine_name = $main_migration . $resource_name;
    $class_name = 'GSB' . $resource_name . 'Migration';
    Migration::registerMigration($class_name, $machine_name, $common_arguments + array(
        'dependencies' => array($main_migration),
        'source_migration' => $main_migration,
    ));
  }

  // School story group
  $main_migration = 'GSBAnnouncement';
  $common_arguments = array(
    'group_name' => 'announcement',
    'source_file' => $directory . 'announcement.csv',
  );
  Migration::registerMigration(GSBSchoolStoryMigration, $main_migration, $common_arguments + array(
      'destination_type' => 'announcement',
    ));

  Migration::registerMigration('GSBRelatedFacultyMigration', $main_migration . 'RelatedFaculty', $common_arguments + array(
      'destination_type' => 'field_related_faculty',
      'dependencies' => array($main_migration),
      'source_migration' => $main_migration,
    ));

  Migration::registerMigration('GSBRelatedContentMigration', $main_migration  . 'RelatedContent', $common_arguments + array(
      'destination_type' => 'field_related_other_unlimited',
      'dependencies' => array($main_migration),
      'source_migration' => $main_migration,
    ));

  $resource_types = array(
    'ResourceImage',
    'ResourceYoutube',
    'ResourceCallout',
    'ResourceTwitter',
  );

  foreach ($resource_types as $resource_name) {
    $machine_name = $main_migration . $resource_name;
    $class_name = 'GSB' . $resource_name . 'Migration';
    Migration::registerMigration($class_name, $machine_name, $common_arguments + array(
        'dependencies' => array($main_migration),
        'source_migration' => $main_migration,
      ));
  }
}

/**
 * Helper callback to extract first value from an array.
 * @param $values
 * @return mixed
 */
function singlify($values) {
  return reset($values);
}

/**
 * Helper function to decode entities in array.
 *
 * @param array $array
 * @return array
 *   Processed array.
 */
function array_decode_entities($array) {
  if (is_array($array)) {
    foreach ($array as &$value) {
      if (is_string($value)) {
        $value = decode_entities($value);
      }
    }
  }

  return $array;
}

/**
 * Helper function to strip tags in array values.
 *
 * @param array $array
 * @return array
 *   Processed array.
 */
function array_strip_tags($array) {
  if (is_array($array)) {
    foreach ($array as &$value) {
      if (is_string($value)) {
        $value = strip_tags($value);
      }
    }
  }

  return $array;
}

/**
 * Helper function to convert YES/NO strings to TRUE/FALSE bool.
 * @param $value
 * @return bool
 */
function gsb_string_to_bool($value) {
  if (strtolower($value) == 'yes') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
